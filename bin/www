#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('express:server')
var http = require('http')
  // , fs = require('fs')
  // , path = require('path')

var config = require('../lib/config')
console.log(config.get('port'))
// var port = normalizePort(process.env.PORT || '3000')
app.set('port', config.get('port'))

var butil = require('../lib/util')
  , jar = require('../lib/cookie-jar')

butil.setCookieJar(jar)
butil.setHost('https://dev.borgnix.com')

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(config.get('port'))
server.on('error', onError)
server.on('listening', onListening)

// start mqtt listener
var listener = require('../lib/listener')
listener.start()

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof config.get('port') === 'string'
    ? 'Pipe ' + config.get('port')
    : 'Port ' + config.get('port')

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
